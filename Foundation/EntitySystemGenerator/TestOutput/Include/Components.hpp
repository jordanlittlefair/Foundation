/*
	This file is automatically generated.
	Do not edit this file manually.
*/

#ifndef _COMPONENTS_HPP_
#define _COMPONENTS_HPP_

#include "Component.hpp"
#include "ComponentDataTypes.hpp"

namespace Fnd
{
namespace EntitySystem
{

static const unsigned int InvalidComponentId = -1;

static const unsigned int InvalidComponentIndex = -1;

static const ComponentId InvalidComponent = { InvalidComponentId, InvalidComponentIndex };

/**
	Get the id of a component type.
	@tparam ComponentType The type of component to add.
	@return Returns the id of ComponentType.
*/
template <typename ComponentType>
inline unsigned int GetComponentId();

/// Struct generated for SceneNodeComponent.
struct SceneNodeComponent_s
{
	SceneNodeComponent_s();
	~SceneNodeComponent_s();

	string64 parent_name;
	uint32 parent_id;
	Fnd::Math::Vector3 position;
	Fnd::Math::Quaternion rotation;
	Fnd::Math::Vector3 scale;
};
#define SCENENODECOMPONENT_ID 0
/// Component<> class generated for SceneNodeComponent.
typedef Fnd::EntitySystem::ComponentTemplate<SceneNodeComponent_s, SCENENODECOMPONENT_ID> SceneNodeComponent;

/// Struct generated for CameraPropertiesComponent.
struct CameraPropertiesComponent_s
{
	CameraPropertiesComponent_s();
	~CameraPropertiesComponent_s();

	float32 near_plane;
	float32 far_plane;
	float32 fov;
};
#define CAMERAPROPERTIESCOMPONENT_ID 1
/// Component<> class generated for CameraPropertiesComponent.
typedef Fnd::EntitySystem::ComponentTemplate<CameraPropertiesComponent_s, CAMERAPROPERTIESCOMPONENT_ID> CameraPropertiesComponent;

/// Struct generated for RumbleComponent.
struct RumbleComponent_s
{
	RumbleComponent_s();
	~RumbleComponent_s();

	bool controller_0;
	bool controller_1;
	bool controller_2;
	bool controller_3;
	bool all_controllers;
	float32 lf_intensity;
	float32 rf_intensity;
};
#define RUMBLECOMPONENT_ID 2
/// Component<> class generated for RumbleComponent.
typedef Fnd::EntitySystem::ComponentTemplate<RumbleComponent_s, RUMBLECOMPONENT_ID> RumbleComponent;

/// Struct generated for RigidBodyComponent.
struct RigidBodyComponent_s
{
	RigidBodyComponent_s();
	~RigidBodyComponent_s();

	uint32 collider_type;
	bool is_static;
	float32 mass;
	float32 friction;
	float32 restitution;
	Fnd::Math::Vector3 velocity;
	Fnd::Math::Vector3 angular_velocity;
};
#define RIGIDBODYCOMPONENT_ID 3
/// Component<> class generated for RigidBodyComponent.
typedef Fnd::EntitySystem::ComponentTemplate<RigidBodyComponent_s, RIGIDBODYCOMPONENT_ID> RigidBodyComponent;

/// Struct generated for AmbientLightComponent.
struct AmbientLightComponent_s
{
	AmbientLightComponent_s();
	~AmbientLightComponent_s();

	Fnd::Math::Vector3 colour;
};
#define AMBIENTLIGHTCOMPONENT_ID 4
/// Component<> class generated for AmbientLightComponent.
typedef Fnd::EntitySystem::ComponentTemplate<AmbientLightComponent_s, AMBIENTLIGHTCOMPONENT_ID> AmbientLightComponent;

/// Struct generated for DirectionalLightComponent.
struct DirectionalLightComponent_s
{
	DirectionalLightComponent_s();
	~DirectionalLightComponent_s();

	Fnd::Math::Vector3 colour;
};
#define DIRECTIONALLIGHTCOMPONENT_ID 5
/// Component<> class generated for DirectionalLightComponent.
typedef Fnd::EntitySystem::ComponentTemplate<DirectionalLightComponent_s, DIRECTIONALLIGHTCOMPONENT_ID> DirectionalLightComponent;

/// Struct generated for SpotLightComponent.
struct SpotLightComponent_s
{
	SpotLightComponent_s();
	~SpotLightComponent_s();

	Fnd::Math::Vector3 colour;
	float32 range;
	float32 near_plane;
	float32 fov;
	float32 distance_falloff_start;
	float32 angular_falloff_start;
	Fnd::Math::Vector4 distance_falloff_params;
	Fnd::Math::Vector4 angular_falloff_params;
};
#define SPOTLIGHTCOMPONENT_ID 6
/// Component<> class generated for SpotLightComponent.
typedef Fnd::EntitySystem::ComponentTemplate<SpotLightComponent_s, SPOTLIGHTCOMPONENT_ID> SpotLightComponent;

/// Struct generated for PointLightComponent.
struct PointLightComponent_s
{
	PointLightComponent_s();
	~PointLightComponent_s();

	Fnd::Math::Vector3 colour;
	float32 range;
	float32 distance_falloff_start;
	Fnd::Math::Vector4 distance_falloff_params;
};
#define POINTLIGHTCOMPONENT_ID 7
/// Component<> class generated for PointLightComponent.
typedef Fnd::EntitySystem::ComponentTemplate<PointLightComponent_s, POINTLIGHTCOMPONENT_ID> PointLightComponent;

/// Struct generated for ModelComponent.
struct ModelComponent_s
{
	ModelComponent_s();
	~ModelComponent_s();

	string512 model_asset_name;
	uint32 model_id;
};
#define MODELCOMPONENT_ID 8
/// Component<> class generated for ModelComponent.
typedef Fnd::EntitySystem::ComponentTemplate<ModelComponent_s, MODELCOMPONENT_ID> ModelComponent;

/// Struct generated for SkyBoxComponent.
struct SkyBoxComponent_s
{
	SkyBoxComponent_s();
	~SkyBoxComponent_s();

	Fnd::Math::Vector3 sky_colour;
};
#define SKYBOXCOMPONENT_ID 9
/// Component<> class generated for SkyBoxComponent.
typedef Fnd::EntitySystem::ComponentTemplate<SkyBoxComponent_s, SKYBOXCOMPONENT_ID> SkyBoxComponent;

/// Struct generated for MotionBlurComponent.
struct MotionBlurComponent_s
{
	MotionBlurComponent_s();
	~MotionBlurComponent_s();

	float32 target_fps;
	float32 motion_blur_scale;
};
#define MOTIONBLURCOMPONENT_ID 10
/// Component<> class generated for MotionBlurComponent.
typedef Fnd::EntitySystem::ComponentTemplate<MotionBlurComponent_s, MOTIONBLURCOMPONENT_ID> MotionBlurComponent;

/// Struct generated for BloomComponent.
struct BloomComponent_s
{
	BloomComponent_s();
	~BloomComponent_s();

	float32 bloom_threshold;
	float32 bloom_blur_radius;
};
#define BLOOMCOMPONENT_ID 11
/// Component<> class generated for BloomComponent.
typedef Fnd::EntitySystem::ComponentTemplate<BloomComponent_s, BLOOMCOMPONENT_ID> BloomComponent;

/// Struct generated for ToneMapComponent.
struct ToneMapComponent_s
{
	ToneMapComponent_s();
	~ToneMapComponent_s();

	float32 f_number;
};
#define TONEMAPCOMPONENT_ID 12
/// Component<> class generated for ToneMapComponent.
typedef Fnd::EntitySystem::ComponentTemplate<ToneMapComponent_s, TONEMAPCOMPONENT_ID> ToneMapComponent;

/// Struct generated for AmbientOcclusionComponent.
struct AmbientOcclusionComponent_s
{
	AmbientOcclusionComponent_s();
	~AmbientOcclusionComponent_s();

	float32 ssao_radius;
	float32 ssao_exponent;
	float32 ssao_blur_radius;
};
#define AMBIENTOCCLUSIONCOMPONENT_ID 13
/// Component<> class generated for AmbientOcclusionComponent.
typedef Fnd::EntitySystem::ComponentTemplate<AmbientOcclusionComponent_s, AMBIENTOCCLUSIONCOMPONENT_ID> AmbientOcclusionComponent;


/*
	GetComponentId<> implementations.
*/

template <>
inline unsigned int GetComponentId<SceneNodeComponent>()
{
	return SCENENODECOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<CameraPropertiesComponent>()
{
	return CAMERAPROPERTIESCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<RumbleComponent>()
{
	return RUMBLECOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<RigidBodyComponent>()
{
	return RIGIDBODYCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<AmbientLightComponent>()
{
	return AMBIENTLIGHTCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<DirectionalLightComponent>()
{
	return DIRECTIONALLIGHTCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<SpotLightComponent>()
{
	return SPOTLIGHTCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<PointLightComponent>()
{
	return POINTLIGHTCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<ModelComponent>()
{
	return MODELCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<SkyBoxComponent>()
{
	return SKYBOXCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<MotionBlurComponent>()
{
	return MOTIONBLURCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<BloomComponent>()
{
	return BLOOMCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<ToneMapComponent>()
{
	return TONEMAPCOMPONENT_ID;
}
template <>
inline unsigned int GetComponentId<AmbientOcclusionComponent>()
{
	return AMBIENTOCCLUSIONCOMPONENT_ID;
}
}
}

#endif
