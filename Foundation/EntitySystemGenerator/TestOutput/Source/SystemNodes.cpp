/*
	This file is automatically generated.
	Do not edit this file manually.
*/

#include "../Include/Components.hpp"
#include "../Include/EntitySystem.hpp"
#include "../Include/SystemNodes.hpp"

using namespace Fnd::EntitySystem;

AmbientLightNode::AmbientLightNode():
	ambientlight_id(InvalidComponentIndex)
{
}

bool AmbientLightNode::Create( Entity* entity )
{
	ambientlight_id = entity->GetComponentId<AmbientLightComponent>().component_index;
	if ( ambientlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool AmbientLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.ambientlight = entity_system.GetComponent<AmbientLightComponent>( ambientlight_id );
	if ( p.ambientlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int AmbientLightNode::GetAmbientLightComponentId() const
{
	return ambientlight_id;
}

CameraNode::CameraNode():
	scenenode_id(InvalidComponentIndex),
	cameraproperties_id(InvalidComponentIndex)
{
}

bool CameraNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	cameraproperties_id = entity->GetComponentId<CameraPropertiesComponent>().component_index;
	if ( cameraproperties_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool CameraNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.cameraproperties = entity_system.GetComponent<CameraPropertiesComponent>( cameraproperties_id );
	if ( p.cameraproperties == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int CameraNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int CameraNode::GetCameraPropertiesComponentId() const
{
	return cameraproperties_id;
}

DirectionalLightNode::DirectionalLightNode():
	scenenode_id(InvalidComponentIndex),
	directionallight_id(InvalidComponentIndex)
{
}

bool DirectionalLightNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	directionallight_id = entity->GetComponentId<DirectionalLightComponent>().component_index;
	if ( directionallight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool DirectionalLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.directionallight = entity_system.GetComponent<DirectionalLightComponent>( directionallight_id );
	if ( p.directionallight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int DirectionalLightNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int DirectionalLightNode::GetDirectionalLightComponentId() const
{
	return directionallight_id;
}

ModelNode::ModelNode():
	scenenode_id(InvalidComponentIndex),
	model_id(InvalidComponentIndex)
{
}

bool ModelNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	model_id = entity->GetComponentId<ModelComponent>().component_index;
	if ( model_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool ModelNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.model = entity_system.GetComponent<ModelComponent>( model_id );
	if ( p.model == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int ModelNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int ModelNode::GetModelComponentId() const
{
	return model_id;
}

RigidBodyNode::RigidBodyNode():
	scenenode_id(InvalidComponentIndex),
	rigidbody_id(InvalidComponentIndex)
{
}

bool RigidBodyNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	rigidbody_id = entity->GetComponentId<RigidBodyComponent>().component_index;
	if ( rigidbody_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool RigidBodyNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.rigidbody = entity_system.GetComponent<RigidBodyComponent>( rigidbody_id );
	if ( p.rigidbody == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int RigidBodyNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int RigidBodyNode::GetRigidBodyComponentId() const
{
	return rigidbody_id;
}

PointLightNode::PointLightNode():
	scenenode_id(InvalidComponentIndex),
	pointlight_id(InvalidComponentIndex)
{
}

bool PointLightNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	pointlight_id = entity->GetComponentId<PointLightComponent>().component_index;
	if ( pointlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool PointLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.pointlight = entity_system.GetComponent<PointLightComponent>( pointlight_id );
	if ( p.pointlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int PointLightNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int PointLightNode::GetPointLightComponentId() const
{
	return pointlight_id;
}

PostProcessNode::PostProcessNode():
	ambientocclusion_id(InvalidComponentIndex),
	motionblur_id(InvalidComponentIndex),
	bloom_id(InvalidComponentIndex),
	tonemap_id(InvalidComponentIndex)
{
}

bool PostProcessNode::Create( Entity* entity )
{
	ambientocclusion_id = entity->GetComponentId<AmbientOcclusionComponent>().component_index;
	if ( ambientocclusion_id == InvalidComponentIndex )
	{
		return false;
	}

	motionblur_id = entity->GetComponentId<MotionBlurComponent>().component_index;
	if ( motionblur_id == InvalidComponentIndex )
	{
		return false;
	}

	bloom_id = entity->GetComponentId<BloomComponent>().component_index;
	if ( bloom_id == InvalidComponentIndex )
	{
		return false;
	}

	tonemap_id = entity->GetComponentId<ToneMapComponent>().component_index;
	if ( tonemap_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool PostProcessNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.ambientocclusion = entity_system.GetComponent<AmbientOcclusionComponent>( ambientocclusion_id );
	if ( p.ambientocclusion == nullptr )
	{
		return false;
	}

	p.motionblur = entity_system.GetComponent<MotionBlurComponent>( motionblur_id );
	if ( p.motionblur == nullptr )
	{
		return false;
	}

	p.bloom = entity_system.GetComponent<BloomComponent>( bloom_id );
	if ( p.bloom == nullptr )
	{
		return false;
	}

	p.tonemap = entity_system.GetComponent<ToneMapComponent>( tonemap_id );
	if ( p.tonemap == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int PostProcessNode::GetAmbientOcclusionComponentId() const
{
	return ambientocclusion_id;
}

unsigned int PostProcessNode::GetMotionBlurComponentId() const
{
	return motionblur_id;
}

unsigned int PostProcessNode::GetBloomComponentId() const
{
	return bloom_id;
}

unsigned int PostProcessNode::GetToneMapComponentId() const
{
	return tonemap_id;
}

RumbleNode::RumbleNode():
	rumble_id(InvalidComponentIndex)
{
}

bool RumbleNode::Create( Entity* entity )
{
	rumble_id = entity->GetComponentId<RumbleComponent>().component_index;
	if ( rumble_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool RumbleNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.rumble = entity_system.GetComponent<RumbleComponent>( rumble_id );
	if ( p.rumble == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int RumbleNode::GetRumbleComponentId() const
{
	return rumble_id;
}

SceneNodeNode::SceneNodeNode():
	scenenode_id(InvalidComponentIndex)
{
}

bool SceneNodeNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool SceneNodeNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int SceneNodeNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

ShadowCasterNode::ShadowCasterNode():
	scenenode_id(InvalidComponentIndex),
	model_id(InvalidComponentIndex)
{
}

bool ShadowCasterNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	model_id = entity->GetComponentId<ModelComponent>().component_index;
	if ( model_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool ShadowCasterNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.model = entity_system.GetComponent<ModelComponent>( model_id );
	if ( p.model == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int ShadowCasterNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int ShadowCasterNode::GetModelComponentId() const
{
	return model_id;
}

ShadowedSpotLightNode::ShadowedSpotLightNode():
	scenenode_id(InvalidComponentIndex),
	spotlight_id(InvalidComponentIndex)
{
}

bool ShadowedSpotLightNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	spotlight_id = entity->GetComponentId<SpotLightComponent>().component_index;
	if ( spotlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool ShadowedSpotLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.spotlight = entity_system.GetComponent<SpotLightComponent>( spotlight_id );
	if ( p.spotlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int ShadowedSpotLightNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int ShadowedSpotLightNode::GetSpotLightComponentId() const
{
	return spotlight_id;
}

SkyBoxNode::SkyBoxNode():
	skybox_id(InvalidComponentIndex)
{
}

bool SkyBoxNode::Create( Entity* entity )
{
	skybox_id = entity->GetComponentId<SkyBoxComponent>().component_index;
	if ( skybox_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool SkyBoxNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.skybox = entity_system.GetComponent<SkyBoxComponent>( skybox_id );
	if ( p.skybox == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int SkyBoxNode::GetSkyBoxComponentId() const
{
	return skybox_id;
}

SpotLightNode::SpotLightNode():
	scenenode_id(InvalidComponentIndex),
	spotlight_id(InvalidComponentIndex)
{
}

bool SpotLightNode::Create( Entity* entity )
{
	scenenode_id = entity->GetComponentId<SceneNodeComponent>().component_index;
	if ( scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	spotlight_id = entity->GetComponentId<SpotLightComponent>().component_index;
	if ( spotlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool SpotLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;
	p.scenenode = entity_system.GetComponent<SceneNodeComponent>( scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.spotlight = entity_system.GetComponent<SpotLightComponent>( spotlight_id );
	if ( p.spotlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int SpotLightNode::GetSceneNodeComponentId() const
{
	return scenenode_id;
}

unsigned int SpotLightNode::GetSpotLightComponentId() const
{
	return spotlight_id;
}

