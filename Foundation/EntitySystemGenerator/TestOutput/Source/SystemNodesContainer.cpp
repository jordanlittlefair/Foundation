/*
	This file is automatically generated.
	Do not edit this file manually.
*/

#include "../Include/SystemNodesContainer.hpp"
#include "../Include/EntitySystem.hpp"
#include "../../Utility/Include/XmlManager.hpp"

using namespace Fnd::EntitySystem;

std::list<AmbientLightNode>& SystemNodesContainer::GetAmbientLightNodeList()
{
	return _ambientlightnode;
}

const std::list<AmbientLightNode>& SystemNodesContainer::GetAmbientLightNodeList() const
{
	return _ambientlightnode;
}

std::list<CameraNode>& SystemNodesContainer::GetCameraNodeList()
{
	return _cameranode;
}

const std::list<CameraNode>& SystemNodesContainer::GetCameraNodeList() const
{
	return _cameranode;
}

std::list<DirectionalLightNode>& SystemNodesContainer::GetDirectionalLightNodeList()
{
	return _directionallightnode;
}

const std::list<DirectionalLightNode>& SystemNodesContainer::GetDirectionalLightNodeList() const
{
	return _directionallightnode;
}

std::list<ModelNode>& SystemNodesContainer::GetModelNodeList()
{
	return _modelnode;
}

const std::list<ModelNode>& SystemNodesContainer::GetModelNodeList() const
{
	return _modelnode;
}

std::list<RigidBodyNode>& SystemNodesContainer::GetRigidBodyNodeList()
{
	return _rigidbodynode;
}

const std::list<RigidBodyNode>& SystemNodesContainer::GetRigidBodyNodeList() const
{
	return _rigidbodynode;
}

std::list<PointLightNode>& SystemNodesContainer::GetPointLightNodeList()
{
	return _pointlightnode;
}

const std::list<PointLightNode>& SystemNodesContainer::GetPointLightNodeList() const
{
	return _pointlightnode;
}

std::list<PostProcessNode>& SystemNodesContainer::GetPostProcessNodeList()
{
	return _postprocessnode;
}

const std::list<PostProcessNode>& SystemNodesContainer::GetPostProcessNodeList() const
{
	return _postprocessnode;
}

std::list<RumbleNode>& SystemNodesContainer::GetRumbleNodeList()
{
	return _rumblenode;
}

const std::list<RumbleNode>& SystemNodesContainer::GetRumbleNodeList() const
{
	return _rumblenode;
}

std::list<SceneNodeNode>& SystemNodesContainer::GetSceneNodeNodeList()
{
	return _scenenodenode;
}

const std::list<SceneNodeNode>& SystemNodesContainer::GetSceneNodeNodeList() const
{
	return _scenenodenode;
}

std::list<ShadowCasterNode>& SystemNodesContainer::GetShadowCasterNodeList()
{
	return _shadowcasternode;
}

const std::list<ShadowCasterNode>& SystemNodesContainer::GetShadowCasterNodeList() const
{
	return _shadowcasternode;
}

std::list<ShadowedSpotLightNode>& SystemNodesContainer::GetShadowedSpotLightNodeList()
{
	return _shadowedspotlightnode;
}

const std::list<ShadowedSpotLightNode>& SystemNodesContainer::GetShadowedSpotLightNodeList() const
{
	return _shadowedspotlightnode;
}

std::list<SkyBoxNode>& SystemNodesContainer::GetSkyBoxNodeList()
{
	return _skyboxnode;
}

const std::list<SkyBoxNode>& SystemNodesContainer::GetSkyBoxNodeList() const
{
	return _skyboxnode;
}

std::list<SpotLightNode>& SystemNodesContainer::GetSpotLightNodeList()
{
	return _spotlightnode;
}

const std::list<SpotLightNode>& SystemNodesContainer::GetSpotLightNodeList() const
{
	return _spotlightnode;
}

template <typename SystemNodeType>
bool AddSystemNodeInternal( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity );

template <>
bool AddSystemNodeInternal<AmbientLightNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	AmbientLightNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetAmbientLightNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<CameraNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	CameraNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetCameraNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<DirectionalLightNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	DirectionalLightNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetDirectionalLightNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<ModelNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	ModelNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetModelNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<RigidBodyNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	RigidBodyNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetRigidBodyNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<PointLightNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	PointLightNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetPointLightNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<PostProcessNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	PostProcessNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetPostProcessNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<RumbleNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	RumbleNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetRumbleNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<SceneNodeNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	SceneNodeNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetSceneNodeNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<ShadowCasterNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	ShadowCasterNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetShadowCasterNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<ShadowedSpotLightNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	ShadowedSpotLightNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetShadowedSpotLightNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<SkyBoxNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	SkyBoxNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetSkyBoxNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
template <>
bool AddSystemNodeInternal<SpotLightNode>( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	SpotLightNode node;
	if ( node.Create(entity) )
	{
		entity_system.GetSystemNodesContainer().GetSpotLightNodeList().push_back(node);
		return true;
	}
	else
	{
	return true;
	}
}
bool EntitySystem::AddSystemNode( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity )
{
	if( node_data.name == "AmbientLightNode" )
	{
		return AddSystemNodeInternal<AmbientLightNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "CameraNode" )
	{
		return AddSystemNodeInternal<CameraNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "DirectionalLightNode" )
	{
		return AddSystemNodeInternal<DirectionalLightNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "ModelNode" )
	{
		return AddSystemNodeInternal<ModelNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "RigidBodyNode" )
	{
		return AddSystemNodeInternal<RigidBodyNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "PointLightNode" )
	{
		return AddSystemNodeInternal<PointLightNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "PostProcessNode" )
	{
		return AddSystemNodeInternal<PostProcessNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "RumbleNode" )
	{
		return AddSystemNodeInternal<RumbleNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "SceneNodeNode" )
	{
		return AddSystemNodeInternal<SceneNodeNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "ShadowCasterNode" )
	{
		return AddSystemNodeInternal<ShadowCasterNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "ShadowedSpotLightNode" )
	{
		return AddSystemNodeInternal<ShadowedSpotLightNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "SkyBoxNode" )
	{
		return AddSystemNodeInternal<SkyBoxNode>( node_data, entity_system, entity );
	}
	else
	if( node_data.name == "SpotLightNode" )
	{
		return AddSystemNodeInternal<SpotLightNode>( node_data, entity_system, entity );
	}
	else
	{
		return false;
	}
}
