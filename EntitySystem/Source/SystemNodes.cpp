/*
	This file is automatically generated.
	Do not edit this file manually.
*/

#include "../Include/Components.hpp"
#include "../Include/EntitySystem.hpp"
#include "../Include/SystemNodes.hpp"
#include "../Include/Components.hpp"
#include "../Include/Entity.hpp"
#include "../Include/ComponentMaps.hpp"
#include "../Include/EntitySystem.hpp"
#include "../Include/EntityContainer.hpp"
#include "../Include/SystemNodes.hpp"
#include "../Include/SystemNodesContainer.hpp"

using namespace Fnd::EntitySystem;

SceneNodeNode::SceneNodeNode():
	SystemNode("SceneNodeNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex)
{
}

bool SceneNodeNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool SceneNodeNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int SceneNodeNode::GetEntityId()
{
	return _entity_id;
}

unsigned int SceneNodeNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

AmbientLightNode::AmbientLightNode():
	SystemNode("AmbientLightNode"),
	_entity_id(InvalidComponentIndex),
	_ambientlight_id(InvalidComponentIndex)
{
}

bool AmbientLightNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_ambientlight_id = entity->GetComponentId<AmbientLightComponent>();
	if ( _ambientlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool AmbientLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.ambientlight = entity_system.GetComponentMaps().GetComponent<AmbientLightComponent>( _ambientlight_id );
	if ( p.ambientlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int AmbientLightNode::GetEntityId()
{
	return _entity_id;
}

unsigned int AmbientLightNode::GetAmbientLightComponentId() const
{
	return _ambientlight_id;
}

CameraNode::CameraNode():
	SystemNode("CameraNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex),
	_cameraproperties_id(InvalidComponentIndex)
{
}

bool CameraNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	_cameraproperties_id = entity->GetComponentId<CameraPropertiesComponent>();
	if ( _cameraproperties_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool CameraNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.cameraproperties = entity_system.GetComponentMaps().GetComponent<CameraPropertiesComponent>( _cameraproperties_id );
	if ( p.cameraproperties == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int CameraNode::GetEntityId()
{
	return _entity_id;
}

unsigned int CameraNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

unsigned int CameraNode::GetCameraPropertiesComponentId() const
{
	return _cameraproperties_id;
}

ModelNode::ModelNode():
	SystemNode("ModelNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex),
	_model_id(InvalidComponentIndex)
{
}

bool ModelNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	_model_id = entity->GetComponentId<ModelComponent>();
	if ( _model_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool ModelNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.model = entity_system.GetComponentMaps().GetComponent<ModelComponent>( _model_id );
	if ( p.model == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int ModelNode::GetEntityId()
{
	return _entity_id;
}

unsigned int ModelNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

unsigned int ModelNode::GetModelComponentId() const
{
	return _model_id;
}

RigidBodyNode::RigidBodyNode():
	SystemNode("RigidBodyNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex),
	_rigidbody_id(InvalidComponentIndex)
{
}

bool RigidBodyNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	_rigidbody_id = entity->GetComponentId<RigidBodyComponent>();
	if ( _rigidbody_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool RigidBodyNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.rigidbody = entity_system.GetComponentMaps().GetComponent<RigidBodyComponent>( _rigidbody_id );
	if ( p.rigidbody == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int RigidBodyNode::GetEntityId()
{
	return _entity_id;
}

unsigned int RigidBodyNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

unsigned int RigidBodyNode::GetRigidBodyComponentId() const
{
	return _rigidbody_id;
}

PointLightNode::PointLightNode():
	SystemNode("PointLightNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex),
	_pointlight_id(InvalidComponentIndex)
{
}

bool PointLightNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	_pointlight_id = entity->GetComponentId<PointLightComponent>();
	if ( _pointlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool PointLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.pointlight = entity_system.GetComponentMaps().GetComponent<PointLightComponent>( _pointlight_id );
	if ( p.pointlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int PointLightNode::GetEntityId()
{
	return _entity_id;
}

unsigned int PointLightNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

unsigned int PointLightNode::GetPointLightComponentId() const
{
	return _pointlight_id;
}

DirectionalLightNode::DirectionalLightNode():
	SystemNode("DirectionalLightNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex),
	_directionallight_id(InvalidComponentIndex)
{
}

bool DirectionalLightNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	_directionallight_id = entity->GetComponentId<DirectionalLightComponent>();
	if ( _directionallight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool DirectionalLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.directionallight = entity_system.GetComponentMaps().GetComponent<DirectionalLightComponent>( _directionallight_id );
	if ( p.directionallight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int DirectionalLightNode::GetEntityId()
{
	return _entity_id;
}

unsigned int DirectionalLightNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

unsigned int DirectionalLightNode::GetDirectionalLightComponentId() const
{
	return _directionallight_id;
}

SpotLightNode::SpotLightNode():
	SystemNode("SpotLightNode"),
	_entity_id(InvalidComponentIndex),
	_scenenode_id(InvalidComponentIndex),
	_spotlight_id(InvalidComponentIndex)
{
}

bool SpotLightNode::Create( Entity* entity )
{
	_entity_id = entity->GetId();

	_scenenode_id = entity->GetComponentId<SceneNodeComponent>();
	if ( _scenenode_id == InvalidComponentIndex )
	{
		return false;
	}

	_spotlight_id = entity->GetComponentId<SpotLightComponent>();
	if ( _spotlight_id == InvalidComponentIndex )
	{
		return false;
	}

	return true;
}

bool SpotLightNode::GetPointers( EntitySystem& entity_system, Pointers& pointers )
{
	Pointers p;

	if ( !entity_system.GetEntityContainer().GetEntity(_entity_id) )
	{
		return false;
	}

	p.scenenode = entity_system.GetComponentMaps().GetComponent<SceneNodeComponent>( _scenenode_id );
	if ( p.scenenode == nullptr )
	{
		return false;
	}

	p.spotlight = entity_system.GetComponentMaps().GetComponent<SpotLightComponent>( _spotlight_id );
	if ( p.spotlight == nullptr )
	{
		return false;
	}

	pointers = p;
	return true;
}

unsigned int SpotLightNode::GetEntityId()
{
	return _entity_id;
}

unsigned int SpotLightNode::GetSceneNodeComponentId() const
{
	return _scenenode_id;
}

unsigned int SpotLightNode::GetSpotLightComponentId() const
{
	return _spotlight_id;
}

