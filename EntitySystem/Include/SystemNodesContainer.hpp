/*
	This file is automatically generated.
	Do not edit this file manually.
*/

#ifndef _SYSTEMNODESCONTAINER_HPP_
#define _SYSTEMNODESCONTAINER_HPP_

#include "SystemNodes.hpp"
#include "../../Utility/Include/IdGenerator.hpp"
#include "../../GameComponentInterfaces/Include/IWorld.hpp"
#include "EntitySystem.hpp"

#include <list>
#include <map>

namespace Fnd
{
namespace EntitySystem
{

class SystemNodesContainer
{
	public:

	SystemNodesContainer( EntitySystem* entity_system );

	template <typename NodeType>
	inline NodeType* AddSystemNode( EntitySystem& entity_system, Entity* entity );

	SystemNode* CreateSystemNode( const Fnd::GameComponentInterfaces::WorldData::Entity::Node& node_data, EntitySystem& entity_system, Entity* entity );

	template <typename NodeType>
	inline std::map<unsigned int,NodeType>& GetNodeMap();

	template <typename NodeType>
	inline const std::map<unsigned int,NodeType>& GetNodeMap() const;

	template <typename NodeType>
	inline bool RemoveSystemNode( NodeType* node );

	private:

	EntitySystem* _entity_system;

	std::map<unsigned int,SceneNodeNode> _scenenodenode;
	std::map<unsigned int,AmbientLightNode> _ambientlightnode;
	std::map<unsigned int,CameraNode> _cameranode;
	std::map<unsigned int,ModelNode> _modelnode;
	std::map<unsigned int,RigidBodyNode> _rigidbodynode;
	std::map<unsigned int,PointLightNode> _pointlightnode;
	std::map<unsigned int,DirectionalLightNode> _directionallightnode;
	std::map<unsigned int,SpotLightNode> _spotlightnode;

	Fnd::Utility::IdGenerator _id_generator;

};

}
}

namespace Fnd
{
namespace EntitySystem
{

/*
	GetNodeMap<> implementations.
*/

template <>
inline std::map<unsigned int,SceneNodeNode>& SystemNodesContainer::GetNodeMap<SceneNodeNode>()
{
	return _scenenodenode;
}

template <>
inline const std::map<unsigned int,SceneNodeNode>& SystemNodesContainer::GetNodeMap<SceneNodeNode>() const
{
	return _scenenodenode;
}

template <>
inline std::map<unsigned int,AmbientLightNode>& SystemNodesContainer::GetNodeMap<AmbientLightNode>()
{
	return _ambientlightnode;
}

template <>
inline const std::map<unsigned int,AmbientLightNode>& SystemNodesContainer::GetNodeMap<AmbientLightNode>() const
{
	return _ambientlightnode;
}

template <>
inline std::map<unsigned int,CameraNode>& SystemNodesContainer::GetNodeMap<CameraNode>()
{
	return _cameranode;
}

template <>
inline const std::map<unsigned int,CameraNode>& SystemNodesContainer::GetNodeMap<CameraNode>() const
{
	return _cameranode;
}

template <>
inline std::map<unsigned int,ModelNode>& SystemNodesContainer::GetNodeMap<ModelNode>()
{
	return _modelnode;
}

template <>
inline const std::map<unsigned int,ModelNode>& SystemNodesContainer::GetNodeMap<ModelNode>() const
{
	return _modelnode;
}

template <>
inline std::map<unsigned int,RigidBodyNode>& SystemNodesContainer::GetNodeMap<RigidBodyNode>()
{
	return _rigidbodynode;
}

template <>
inline const std::map<unsigned int,RigidBodyNode>& SystemNodesContainer::GetNodeMap<RigidBodyNode>() const
{
	return _rigidbodynode;
}

template <>
inline std::map<unsigned int,PointLightNode>& SystemNodesContainer::GetNodeMap<PointLightNode>()
{
	return _pointlightnode;
}

template <>
inline const std::map<unsigned int,PointLightNode>& SystemNodesContainer::GetNodeMap<PointLightNode>() const
{
	return _pointlightnode;
}

template <>
inline std::map<unsigned int,DirectionalLightNode>& SystemNodesContainer::GetNodeMap<DirectionalLightNode>()
{
	return _directionallightnode;
}

template <>
inline const std::map<unsigned int,DirectionalLightNode>& SystemNodesContainer::GetNodeMap<DirectionalLightNode>() const
{
	return _directionallightnode;
}

template <>
inline std::map<unsigned int,SpotLightNode>& SystemNodesContainer::GetNodeMap<SpotLightNode>()
{
	return _spotlightnode;
}

template <>
inline const std::map<unsigned int,SpotLightNode>& SystemNodesContainer::GetNodeMap<SpotLightNode>() const
{
	return _spotlightnode;
}

/*
	AddSystemNode<> implementations.
*/

template <>
inline SceneNodeNode* SystemNodesContainer::AddSystemNode<SceneNodeNode>( EntitySystem& entity_system, Entity* entity )
{
	SceneNodeNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_scenenodenode[id] = node;
		_scenenodenode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_scenenodenode[id]);
		return &(_scenenodenode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline AmbientLightNode* SystemNodesContainer::AddSystemNode<AmbientLightNode>( EntitySystem& entity_system, Entity* entity )
{
	AmbientLightNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_ambientlightnode[id] = node;
		_ambientlightnode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_ambientlightnode[id]);
		return &(_ambientlightnode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline CameraNode* SystemNodesContainer::AddSystemNode<CameraNode>( EntitySystem& entity_system, Entity* entity )
{
	CameraNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_cameranode[id] = node;
		_cameranode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_cameranode[id]);
		return &(_cameranode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline ModelNode* SystemNodesContainer::AddSystemNode<ModelNode>( EntitySystem& entity_system, Entity* entity )
{
	ModelNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_modelnode[id] = node;
		_modelnode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_modelnode[id]);
		return &(_modelnode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline RigidBodyNode* SystemNodesContainer::AddSystemNode<RigidBodyNode>( EntitySystem& entity_system, Entity* entity )
{
	RigidBodyNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_rigidbodynode[id] = node;
		_rigidbodynode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_rigidbodynode[id]);
		return &(_rigidbodynode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline PointLightNode* SystemNodesContainer::AddSystemNode<PointLightNode>( EntitySystem& entity_system, Entity* entity )
{
	PointLightNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_pointlightnode[id] = node;
		_pointlightnode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_pointlightnode[id]);
		return &(_pointlightnode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline DirectionalLightNode* SystemNodesContainer::AddSystemNode<DirectionalLightNode>( EntitySystem& entity_system, Entity* entity )
{
	DirectionalLightNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_directionallightnode[id] = node;
		_directionallightnode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_directionallightnode[id]);
		return &(_directionallightnode[id]);
	}
	else
	{
		return nullptr;
	}
}

template <>
inline SpotLightNode* SystemNodesContainer::AddSystemNode<SpotLightNode>( EntitySystem& entity_system, Entity* entity )
{
	SpotLightNode node;
	if ( node.Create( entity ) )
	{
		unsigned int id = _id_generator.GetId();
		_spotlightnode[id] = node;
		_spotlightnode[id].SetIndex(id);
		_entity_system->OnAddSystemNode(&_spotlightnode[id]);
		return &(_spotlightnode[id]);
	}
	else
	{
		return nullptr;
	}
}

/*
	RemoveSystemNode<> implementations.
*/

template <>
inline bool SystemNodesContainer::RemoveSystemNode<SceneNodeNode>( SceneNodeNode* node )
{
	for ( auto iter = _scenenodenode.begin(); iter != _scenenodenode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_scenenodenode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<AmbientLightNode>( AmbientLightNode* node )
{
	for ( auto iter = _ambientlightnode.begin(); iter != _ambientlightnode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_ambientlightnode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<CameraNode>( CameraNode* node )
{
	for ( auto iter = _cameranode.begin(); iter != _cameranode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_cameranode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<ModelNode>( ModelNode* node )
{
	for ( auto iter = _modelnode.begin(); iter != _modelnode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_modelnode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<RigidBodyNode>( RigidBodyNode* node )
{
	for ( auto iter = _rigidbodynode.begin(); iter != _rigidbodynode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_rigidbodynode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<PointLightNode>( PointLightNode* node )
{
	for ( auto iter = _pointlightnode.begin(); iter != _pointlightnode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_pointlightnode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<DirectionalLightNode>( DirectionalLightNode* node )
{
	for ( auto iter = _directionallightnode.begin(); iter != _directionallightnode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_directionallightnode.erase(iter);
			return true;
		}
	}
	return false;
}

template <>
inline bool SystemNodesContainer::RemoveSystemNode<SpotLightNode>( SpotLightNode* node )
{
	for ( auto iter = _spotlightnode.begin(); iter != _spotlightnode.end(); ++iter )
	{
		if ( &iter->second == node )
		{
			_spotlightnode.erase(iter);
			return true;
		}
	}
	return false;
}

}
}

#endif
